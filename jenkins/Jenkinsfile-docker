def getRepoURL() {
  sh "git config --get remote.origin.url > .git/remote-url"
  return readFile(".git/remote-url").trim()
}

def getCommitSha() {
  sh "git rev-parse HEAD > .git/current-commit"
  return readFile(".git/current-commit").trim()
}

def updateGithubCommitStatus(build) {
  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674
  repoUrl = getRepoURL()
  commitSha = getCommitSha()

  step([
    $class: 'GitHubCommitStatusSetter',
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: repoUrl],
    commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commitSha],
    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
    statusResultSource: [
      $class: 'ConditionalStatusResultSource',
      results: [
        [$class: 'BetterThanOrEqualBuildResult', result: 'SUCCESS', state: 'SUCCESS', message: build.description],
        [$class: 'BetterThanOrEqualBuildResult', result: 'FAILURE', state: 'FAILURE', message: build.description],
        [$class: 'AnyBuildResult', state: 'FAILURE', message: 'Loophole']
      ]
    ]
  ])
}

pipeline {

  environment {
    registry = "aabdelhay/test-app"
    registryCredential = 'dockerhub'
    dockerImage = ''
    CI='true'
  }
  agent any
  tools {nodejs "node"}
  stages {
    stage('Build') {
       steps {
         sh 'npm install'
       }
    }
    stage('Test') {
      steps {
        sh 'npm test'
      }
    }
    stage('Build image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }
    stage('Publish Image') {
      steps{
         script {
            docker.withRegistry('https://registry-1.docker.io/v2/', 'docker-cred') {
                  dockerImage.push()
                }
        }
      }
    }
    stage('Clean up'){
        steps {
            script {
                sh 'docker rmi -f aabdelhay/test-app:$BUILD_NUMBER'
            }
        }
    }
  }
  post {
          success {
                updateGithubCommitStatus name: 'Publish Image', description: 'success'
          }
          failure {
            updateGithubCommitStatus name: 'Publish Image', description: 'failed'
          }
  }
}
